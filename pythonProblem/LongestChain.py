#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
@Project  ：MachineLearning 
@File     ：LongestChain.py
@Describe ：PyCharm 
@Author   ：Hello World
@Date     ：2025/5/28 下午1:36
牌型：单顺，又称顺子，最少5张牌，最多12张牌(3…A)不能有2，也不能有大小王，不计花色。
例如： 3-4-5-6-7-8，7-8-9-10-J-Q，3-4-5-6-7-8-9-10-J-Q-K-A
可用的牌 3<4<5<6<7<8<9<10<J<Q<K<A<2<B(小王)<C(大王)，每种牌除大小王外有四种花色
(共有13×4+2张牌)
输入：
手上有的牌
已经出过的牌(包括对手出的和自己出的牌)
输出：
对手可能构成的最长的顺子(如果有相同长度的顺子，输出牌面最大的那一个)，
如果无法构成顺子，则输出 NO-CHAIN。
输入描述
输入的第一行为当前手中的牌
输入的第二行为已经出过的牌
输出描述
最长的顺子
用例1
输入
3-3-3-3-4-4-5-5-6-7-8-9-10-J-Q-K-A
4-5-6-7-8-8-8
输出
9-10-J-Q-K-A
'''
# 牌面值转化为索引值。
mapToV={ # 这里为啥要把2写成16啊，就是顺子的判断不能包括2，
    "3": 3,"4": 4,"5": 5,"6": 6,"7": 7,"8": 8,"9": 9,"10": 10,
    "J": 11,"Q": 12,"K": 13,"A": 14,"2": 16,"B": 17,"C": 18
}
# 索引转化为牌面值
mapToK = {
    3: "3",4: "4", 5: "5",6: "6",7: "7",8: "8",9: "9",10: "10",
    11: "J",12: "Q",13: "K",14: "A",16: "2",17: "B",18: "C"
}
def result(my, used):
    # count每个索引值对应一个牌面值，count元素值就是对应牌面的数量
    # 牌面值           3  4  5  6  7  8  9  10 J  Q  K  A     2  B  C
    # 索引值           3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18
    count = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 1, 1]
    # 总牌数减去我的牌
    for k in my:
        count[mapToV[k]] -= 1
    # 再减去已经出的牌。
    for k in used:
        count[mapToV[k]] -= 1
    # 初始化ans
    ans = "NO-CHAIN"
    maxLen = 0
    # 顺子，最少5张牌
    # l为顺子的左边界，[3,10]，即顺子的左边界值最少是count索引3，最多是count索引10
    l = 3
    while l<=10:
        tmp = []
        # 题目说了 最多12张牌(3...A)不能有2
        for r in range(l, 16):
            # 如果对应的数有牌，就可以组成顺子
            if count[r]>=1:
                tmp.append(mapToK[r])
            # 中断了就把l挪动到r+1
            else:
                # 中断了要判断组成顺子还是没有组成嘛。
                if len(tmp)>=5 and len(tmp)>=maxLen:
                    # 更新maxLen
                    maxLen = len(tmp)
                    ans = "-".join(tmp)
                l = r # 这里为啥等于r呢，因为下面break后跳出本循环，就会有l+=1。好好理解。
                break
        l += 1 # 把l放到这里+1
    return ans
my = input().split('-')
used = input().split('-')
print(result(my, used))
